@page "/"
@inject ChatService ChatService

<PageTitle>Chat</PageTitle>

@if (!IsConnected)
{
    <div class="container text-center">
        <h1 class="mt-4">Welcome to the chat!</h1>
        <div class="mt-3">
            <input @bind="UserName" class="form-control w-50 mx-auto" placeholder="Enter your name" />
            <button @onclick="Connect" class="btn btn-primary mt-3">Join Chat</button>
        </div>
    </div>
}
else
{
    <div class="container">
        <h1 class="mt-4 text-center">Welcome to the chat, @UserName!</h1>
        <div class="chat-box mt-4">
            @foreach (var message in Messages)
            {
                <div class="message mb-2">
                    <span class="badge bg-info">@message.Timestamp.ToLocalTime().ToString("HH:mm:ss")</span>
                    <strong>@message.User:</strong>
                    <span>@message.Text</span>
                </div>
            }
        </div>
        <div class="pagination-controls mt-3 text-center">
            <button class="btn btn-secondary me-2" @onclick="LoadPreviousPage" disabled="@IsFirstPage">Previous</button>
            <span class="current-page mx-3">Page @PageNumber</span>
            <button class="btn btn-secondary" @onclick="LoadNextPage" disabled="@IsLastPage">Next</button>
        </div>
        <div class="mt-3">
            <input @bind="MessageText" @onkeyup="HandleInput" class="form-control" placeholder="Type your message" />
            <button @onclick="SendMessage" class="btn btn-success mt-3">Send</button>
        </div>
    </div>
}

@code {
    private bool IsConnected = false;

    private List<Message> Messages = new();
    private string UserName = string.Empty;
    private string MessageText = string.Empty;
    private int PageNumber = 1;
    private int PageSize = 15;
    private bool IsFirstPage => PageNumber == 1;
    private bool IsLastPage => Messages.Count < PageSize;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(UserName))
        {
            await Connect();
        }

        ChatService.OnMessageReceived += async (user, message) =>
        {
            Messages.Insert(0, new Message { User = user, Text = message, Timestamp = DateTime.UtcNow });
            if (PageNumber != 1)
            {
                PageNumber = 1;
                await LoadMessages();
            }
            StateHasChanged();
        };

        ChatService.OnUserJoined += user =>
        {
            Messages.Insert(0, new Message { User = "System", Text = $"{user} joined the chat", Timestamp = DateTime.UtcNow });
            StateHasChanged();
        };

        ChatService.OnUserLeft += user =>
        {
            Messages.Insert(0, new Message { User = "System", Text = $"{user} left the chat", Timestamp = DateTime.UtcNow });
            StateHasChanged();
        };
    }

    private async Task LoadMessages()
    {
        if (IsConnected)
        {
            var messages = await ChatService.LoadMessagesAsync(PageNumber, PageSize);
            Messages = messages;
        }
    }

    private async Task Connect()
    {
        if (!IsConnected && !string.IsNullOrEmpty(UserName))
        {
            await ChatService.ConnectAsync(UserName);
            IsConnected = true;
            await LoadMessages();
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(MessageText) && IsConnected)
        {
            await ChatService.SendMessageAsync(UserName, MessageText);
            MessageText = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await SendMessage();
        }
    }

    private async Task LoadNextPage()
    {
        if (!IsLastPage)
        {
            PageNumber++;
            await LoadMessages();
        }
    }

    private async Task LoadPreviousPage()
    {
        if (!IsFirstPage)
        {
            PageNumber--;
            await LoadMessages();
        }
    }
}
